package com.ing.gapp.service;

import com.ing.gapp.entity.User;
import com.ing.gapp.rowmapper.UserRowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class UserService {
    private static final Logger LOGGER = Logger.getLogger(UserService.class.getName());
    private static UserService instance;

    @Autowired
    private JdbcTemplate jdbcTemplate;

    /**
     * @return a reference to an example facade for UserService objects.
     */
    public static UserService getInstance() {
        if (instance == null) {
            instance = new UserService();
            instance.ensureTestData();
        }
        return instance;
    }

    /**
     * @return all available User objects.
     */
    public synchronized List<User> findAll() {
        return findAll(null);
    }

    /**
     * Finds all User's that match given filter.
     *
     * @param stringFilter filter that returned objects should match or null/empty string
     *                     if all objects should be returned.
     * @return list a User objects
     */
    public synchronized List<User> findAll(String stringFilter) {
        return jdbcTemplate.query("SELECT id, user_name, user_password, version from TB_Users where user_name like ?",
                new Object[]{"%" + stringFilter + "%"}, new UserRowMapper());
    }

    /**
     * Find the user by name.
     *
     * @param name the name of the user
     * @return the user
     */
    public synchronized User findByName(String name) {

        return jdbcTemplate.queryForObject("SELECT id, user_name, user_password, version from TB_Users WHERE user_name = ?",
                new Object[]{name}, new UserRowMapper());
    }

    /**
     * @return the amount of all user in the system
     */
    public synchronized int count() {
        return jdbcTemplate.queryForObject("SELECT COUNT(*) FROM TB_Users", Integer.class);
    }

    /**
     * Deletes a user from a system
     *
     * @param user the User to be deleted
     */
    public synchronized void delete(User user) {
        jdbcTemplate.update("DELETE FROM TB_Users WHERE id = ?", new Object[]{user.getId()});
    }

    /**
     * Persists or updates User in the system. Also assigns an identifier
     * for new User instances.
     *
     * @param entry
     */
    public synchronized void save(User entry) {
        if (entry == null) {
            LOGGER.log(Level.SEVERE,
                    "User is null. Are you sure you have connected your form to the application as described in tutorial chapter 7?");
            return;
        }
        if (entry.getId() == null) {
            entry.setId(nextId++);
        }
        try {
            entry = (User) entry.clone();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
        jdbcTemplate.update("Insert into TB_Users(id, user_name, user_password, version) values (?, ?, ?, ?)",
                entry.getId(), entry.getName(), entry.getPassword(), entry.getVersion());
    }

    /**
     * Sample data generation
     */
    public void ensureTestData() {
        String createDB = "CREATE TABLE TB_Users (" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY, " +
                "user_name VARCHAR(64), " +
                "user_password VARCHAR(64), " +
                "version INTEGER " +
                ")";

        jdbcTemplate.execute(createDB);

        final String[] names = new String[]{"admin", "user"};
        for (int i = 0; i < names.length; i++) {
            String name = names[i];
            User user = new User();
            user.setId(i);
            user.setName(name);
            user.setPassword(name);
            user.setVersion(0);
            save(user);
        }
    }

    /**
     * Validate a user name and password.
     *
     * @param userName     the user name
     * @param userPassword the user password
     * @return true if is a valid user
     */
    public synchronized boolean login(String userName, String userPassword) {
        boolean valid = false;
        User user = findByName(userName);
        if (user != null && userPassword.equals(user.getPassword())) {
            valid = true;
        }
        return valid;
    }
}